---
- name: Infrastructure setup playbook
  hosts: all
  gather_facts: yes
  become: yes
  
  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600
      
    - name: Install essential packages
      apt:
        name:
          - python3-pip
          - python3-dev
          - build-essential
          - curl
          - wget
          - git
          - vim
          - htop
          - net-tools
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
        state: present
    
    - name: Create ansible user
      user:
        name: ansible
        shell: /bin/bash
        groups: sudo
        append: yes
        create_home: yes
        state: present
    
    - name: Configure passwordless sudo for ansible user
      lineinfile:
        path: /etc/sudoers.d/ansible
        line: 'ansible ALL=(ALL) NOPASSWD: ALL'
        create: yes
        validate: 'visudo -cf %s'
    
    - name: Create .ssh directory for ansible user
      file:
        path: /home/ansible/.ssh
        state: directory
        owner: ansible
        group: ansible
        mode: '0700'

    - name: Set up SSH key for ansible user
      authorized_key:
        user: ansible
        key: "{{ ansible_ssh_public_key }}"
        state: present
        manage_dir: yes
      when: ansible_ssh_public_key is defined
    
    - name: Configure sysctl for better performance
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
      loop:
        - { name: 'vm.swappiness', value: '10' }
        - { name: 'net.ipv4.ip_forward', value: '1' }
      ignore_errors: yes
    
    - name: Configure system limits
      pam_limits:
        domain: '*'
        limit_type: "{{ item.type }}"
        limit_item: "{{ item.item }}"
        value: "{{ item.value }}"
      loop:
        - { type: 'soft', item: 'nofile', value: '65536' }
        - { type: 'hard', item: 'nofile', value: '65536' }
        - { type: 'soft', item: 'nproc', value: '65536' }
        - { type: 'hard', item: 'nproc', value: '65536' }
    
    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - br_netfilter
        - overlay
    
    - name: Ensure kernel modules are loaded on boot
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: "{{ item }}"
        create: yes
      loop:
        - br_netfilter
        - overlay
    
    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Reboot if required
      reboot:
        msg: "Reboot initiated by Ansible for kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when:
        - ansible_facts.pkg_mgr == 'apt'
        - reboot_required.stat.exists